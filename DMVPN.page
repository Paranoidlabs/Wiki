---
format: markdown
title: Dynamic Multipoint VPN (DMVPN)
...
# Dynamic Multipoint VPN (DMVPN)

According to
[Wikipedia](https://en.wikipedia.org/wiki/Dynamic_Multipoint_Virtual_Private_Network):
"Dynamic Multipoint Virtual Private Network is a dynamic tunneling form of a virtual
private network supported on Cisco IOS-based routers, Huawei AR G3 routers and USG
firewalls, and on Unix-like operating systems"


## Short Overview

A DMVPN can be described (somewhat inaccurately) as an "on-demand mesh".
Its operation can be simplified as such:

A machine willing to join the DMVPN - from now on referred to as 'spoke' - first connects
to the hub(s) of the DMVPN. A Hub is simply a statically configured machine with a static
IP, in the case of Plabs simply all servers listed in `dig +short hub.paranoidlabs.org`.

At this stage if a packet is sent to any host reachable via the DMVPN it is sent to the
Hub which will forward it to the actual destination, meaning at this point the whole
network is connected.

At the same time however the sending spoke will try to create a shortcut so it doesn't
have to forward packets via the core unless necessary.
If a hub determines that a shortcut route is possible, that is the packets are forwarded
to another spoke on this DMVPN, it will send the global IP adress of the destination spoke
to the sending spoke.

Having received that information the sending spoke will try to set up a direct IPsec
connection to the receiving spoke and, if successful, insert that spoke into its neighbor
table meaning that packages previously forwarded over the core are now sent directly to
the receiving spoke.

This shortcut route is kept alive for several hours after traffic ceases so within that
timeframe new connections are established directly without relying on the core again.

# Long Overview

This overview will go into much more depth. It is written with a network administrator in
mind and references the above mentioned RFCs heavily.
It is also written in the context of Plabs and will sometimes blur the lines
between technologies and implementations.

## IPsec

Every packet sent over the internet is not send in plain text but encrypted and
authenticated using *handwavy* IPsec using StrongSWAN.


### Crypto

Two different transportation ciphers are available:

 - ChaCha20-Poly1305 
 - 256 bit AES in Galois/Counter Mode using a 128 bit ICV

Generally speaking both are of similar security, however ChaCha20 is much faster
than AES in pure software, often even coming close to AES using native
instructions.^[https://www.imperialviolet.org/2014/02/27/tlssymmetriccrypto.html]

Since both of those ciphers are AEAD we don't require additional integrity
checking or authentication of packets.

IKEv2 includes a pseudo-random function for which we use HMAC with either SHA384
or SHA256.

KEX is done using ECDHE^[Ecliptic Curve Diffie-Hellman exchange with Epheral keys]
over the Brainpool 384 curves, however there is work
done to eventually replace DH with [NTRU](https://en.wikipedia.org/wiki/NTRU), a PQC^[Post Quantum Cryptography] alternative to DH.


### IPsec modes

IPsec knows two different modes of operation:

 - Tunnel mode
 - Transport mode

Transport mode is the simpler one; it simply encrypts the packet's payload,
MAC's the result and sends both in a packet using the same header.

Tunnel mode comes closer to what people expect of a VPN, here the original
packet is encrypted and MAC'ed in its entirety and then packet into another
packet which is send to the receiving end.

The dis- and advantages of both methods are quite obvious: Transport mode is
much more efficient with it's data however does not protect the header
information.

Tunnel mode has a higher overhead however it has the huge advantage of making
the header information changable, allowing for for example different IPs inside
the tunnel compared to outside of it.

We use Transport mode in combination with GRE in Plabs' DMVPN because it
provides us with a superset of possibilities compared to Tunnel mode:
For one every type of packet with an
[ethertype](https://en.wikipedia.org/wiki/EtherType) can be encapsulated but we
can also handle IPmc^[IP Multicast] easily.

On that topic though,


## Generic Routing Encapsulation (GRE)

GRE is a protocol used to encapsulate packets of one type in packets of another type.

In our case we encapsulate IPv4 and IPv6^[[Plabs6]()] in IPv4 or IPv6 (Public Internet).

This allows us to have different tunnel addresses to global addresses - similar
to how IPsec tunnel mode does. However GRE plays much nicer with NHRP.

Plabs does not use any optional features at this moment, so the overhead from
GRE is merely 4 octets / 32 bits.^[[RFC2784](https://tools.ietf.org/html/rfc2784#section-2.1)]

### mGRE

multipoint GRE (mGRE) is a tiny expansion to the idea of GRE. Usually GRE is a
point to point connection. You have two hosts directly sending packets
encapsulated using GRE to each other.

However you can use GRE without specifying a remote endpoint. In that case the
GRE interface becomes a basically layer2 interface which needs some additional
information to send packets to the correct endpoint - namely the neighbor table.

In Linux the neighbor table for Ethernet devices holds a simple mapping of IEEE
802 MAC addresses to IP addresses, populated using ARP.
If a packet is to be sent to an IP address the neighbor table is consulted
first, checking if the MAC address of that IP is known. If so the packet is
directly sent to that neighbor. If not the routing table is consulted for the
next hop.


## NBMA Next Hop Resolution Protocol (NHRP)

NHRP is one of the more crucial parts of the system since it is responsible for
setting up the Spoke-Spoke connections.

NHRP as described in [RFC 2332](https://tools.ietf.org/html/rfc2332) is
protocol-agnostic, however in the current usecase we use it with IPv4/IPv4 only.

In short, NHRP solves the same problem as ARP, however without relying on
Broadcasting.
If you are very familiar with the operation of ARP you may skip the next
paragraph, otherwise read on.

ARP, the Address Resolution Protocol, works by sending messages to the broadcast
address - that is send ethernet packets with a target MAC of `ff:ff:ff:ff:ff:ff`.
These messages allow parties on the same broadcast domain (i.e. the same
switched network) to efficiently populate a table storing MAC<->IP pairs.
If you want to go into further detail read the
[Wikipedia page](https://en.wikipedia.org/wiki/Address_Resolution_Protocol) and the
[ARP RFC](https://tools.ietf.org/html/rfc826).

This method works well if you have the ability to broadcast.
If you however find yourself in a network not capable of broadcasting - be it
X.25 or Frame Relay or SMDS or ATM, you will not be able to use ARP.
It should be noted at this point that while IP itself does support Broadcast -
`255.255.255.255` is the global broadcast address - you won't find a router
actually passing broadcast packets on so the Internet itself does *not* support
broadcasts.

Non-Broadcast Multi-Access (NBMA) networks are a generalization of said
networks. They are differenciated from Broadcast Multi-Access (BMA) networks such
as a switched LAN and Point-to-Point (P2P) networks such as PPP.

NHRP knows of two types of instances:

1. Next Hop Clients (NHC) who send requests
2. Next Hop Servers (NHS) who send responses

A machine may be both NHC and NHS.

Let's showcase an example situation where NHRP is used. In this example we will
encapsulate IPv4 in IPv4 as you commonly find in VPNs.
Furthermore in this environment there are no NATs or similar in the way.

There are two NHC C1 and C2 with the (global) IP-Addresses 2.2.2.2 and 3.3.3.3
and the tunnel-addresses 10.0.0.2 and 10.0.0.3.

There is an additional machine S with the global IP-Address 1.1.1.1 which acts
as NHS.
Both Clients are configured with this NHS.

On bootup both C1 and C2 connect to S and register themselves with both their
global and tunnel addresses - allowing S to create two mappings
2.2.2.2<->10.0.0.2 and 3.3.3.3<->10.0.0.3.

If now C1 wants to sent a packet to C2 it will send a `resolution request` with
C2's **tunnel** address (`10.0.0.3`) to S.
S looks up this address in its mapping table and find out C2's global address:
`3.3.3.3`
It sends a `resolution reply` with this information back to C1 who enters it
into it's neighbor table.

C1 can now send packets to C2: It will call it's network stack with a packet to
`10.0.0.3`, which will look into the neighbor table and find out that the global
address of that host is `3.3.3.3`; it will then ecapsulate the original packet
in a new packet to `3.3.3.3` and send it on the global interface.

I would like to refer back to the section about GRE to make its role in Plabs
more obvious: It is the encapsulation protocol used there.


### Desist, or dynamic Spoke-Spoke connection

If you compare the above example and the short overview you will find a lot of
similarities, in fact they are mostly the same.

DESIST is in reality not much more than a tab of hotsnot holding the whole together.
It's main job is to set up the IPsec Connections between spokes after a
resolution reply has been received.

After that step packets can be sent from one spoke to another and from there on
the dynamic routing protocol takes over.
